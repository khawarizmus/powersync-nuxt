name: Release

on:
  workflow_dispatch:
    inputs:
      strict:
        description: "Run strict release (with linting and testing)"
        required: false
        default: false
        type: boolean
  push:
    branches:
      - main

permissions:
  contents: write
  id-token: write

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          registry-url: "https://registry.npmjs.org"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: "10.12.1"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Configure Git
        run: |
          git config --global user.name "khawarizmus"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Run strict release (with linting and testing)
        if: ${{ inputs.strict }}
        run: pnpm run release:strict
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run standard release
        if: ${{ !inputs.strict }}
        run: pnpm run release
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latest tag
        id: get_tag
        run: |
          latest_tag=$(git describe --tags --abbrev=0)
          echo "tag=$latest_tag" >> $GITHUB_OUTPUT
          echo "Latest tag: $latest_tag"

      - name: Extract changelog for release
        id: changelog
        run: |
          # Get the changelog content between the latest tag and the previous one
          latest_tag="${{ steps.get_tag.outputs.tag }}"
          version_without_v="${latest_tag#v}"
          previous_tag=$(git tag --sort=-version:refname | sed -n '2p')

          if [ -z "$previous_tag" ]; then
              # If no previous tag, get all commits
              changelog=$(git log --pretty=format:"- %s" "$latest_tag")
          else
              # Get commits between previous tag and current tag
              changelog=$(git log --pretty=format:"- %s" "$previous_tag..$latest_tag")
          fi

          # Also try to extract from CHANGELOG.md if it exists
          if [ -f "CHANGELOG.md" ]; then
              # Extract the latest version section from CHANGELOG.md
              changelog_section=$(awk '/^## \[?'"$version_without_v"'\]?/ {flag=1; next} /^## / {flag=0} flag' CHANGELOG.md || echo "")
              if [ ! -z "$changelog_section" ]; then
                  changelog="$changelog_section"
              fi
          fi

          # Save changelog to file to handle multiline content
          echo "$changelog" > /tmp/changelog.txt
          echo "changelog_file=/tmp/changelog.txt" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          release_name: Release ${{ steps.get_tag.outputs.tag }}
          body_path: ${{ steps.changelog.outputs.changelog_file }}
          draft: false
          prerelease: false
